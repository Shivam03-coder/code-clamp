{
  "name": "dropdown-search-bar",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "framer-motion"
  ],
  "registryDependencies": [
    "input",
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState, useRef, useEffect, type ComponentProps } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { Search } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DropdownSearchbarProps extends ComponentProps<typeof Input> {\n  onSearch?: (query: string) => void;\n  suggestions?: string[];\n  className?: string;\n}\n\nfunction DropdownSearchbar({\n  onSearch,\n  suggestions = [],\n  className,\n}: DropdownSearchbarProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filteredSuggestions, setFilteredSuggestions] = useState<string[]>([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const handleSearch = (query = searchQuery) => {\n    if (query.trim()) {\n      onSearch?.(query);\n      setShowSuggestions(false);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleSearch();\n    } else if (e.key === \"Escape\") {\n      setIsExpanded(false);\n      setShowSuggestions(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isExpanded && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isExpanded]);\n\n  useEffect(() => {\n    const filtered = searchQuery\n      ? suggestions.filter((s) =>\n          s.toLowerCase().includes(searchQuery.toLowerCase()),\n        )\n      : [];\n\n    setFilteredSuggestions(filtered);\n    setShowSuggestions(filtered.length > 0);\n  }, [searchQuery, suggestions]);\n\n  useEffect(() => {\n    const handleClickOutside = (e: MouseEvent) => {\n      if (!containerRef.current?.contains(e.target as Node)) {\n        if (!searchQuery) setIsExpanded(false);\n        setShowSuggestions(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [searchQuery]);\n\n  return (\n    <div className={cn(\"relative\", className)} ref={containerRef}>\n      <div className=\"flex items-center\">\n        <AnimatePresence>\n          {isExpanded && (\n            <motion.div\n              initial={{ opacity: 0, width: 0 }}\n              animate={{ opacity: 1, width: \"auto\" }}\n              exit={{ opacity: 0, width: 0 }}\n              transition={{ type: \"spring\", damping: 20, stiffness: 200 }}\n              className=\"overflow-hidden\"\n            >\n              <Input\n                ref={inputRef}\n                type=\"text\"\n                placeholder=\"Search...\"\n                className=\"h-10 rounded-r-none border-r-0 focus-visible:ring-0\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                onKeyDown={handleKeyDown}\n                onFocus={() => {\n                  if (filteredSuggestions.length > 0) setShowSuggestions(true);\n                }}\n              />\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className={cn(\n              \"h-10 w-10 p-0\",\n              isExpanded ? \"rounded-l-none\" : \"rounded-full\",\n            )}\n            onClick={() => (isExpanded ? handleSearch() : setIsExpanded(true))}\n          >\n            <Search className=\"h-4 w-4\" />\n          </Button>\n        </motion.div>\n      </div>\n\n      <AnimatePresence>\n        {showSuggestions && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"bg-background absolute right-0 left-0 z-10 mt-1 max-h-60 overflow-auto rounded-md border p-1 shadow-md\"\n          >\n            {filteredSuggestions.map((s, i) => (\n              <div\n                key={i}\n                className=\"hover:bg-muted cursor-pointer rounded-sm px-3 py-2 text-sm\"\n                onClick={() => {\n                  setSearchQuery(s);\n                  handleSearch(s);\n                }}\n              >\n                {s}\n              </div>\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\nexport default DropdownSearchbar;\n",
      "path": "/components/code-clamp/search-bar/dropdown-search-bar.tsx",
      "target": "/components/code-clamp/dropdown-search-bar.tsx"
    }
  ]
}