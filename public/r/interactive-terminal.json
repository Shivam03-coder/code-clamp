{
  "name": "interactive-terminal",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "framer-motion"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nimport { BaseTerminal, type TerminalProps } from \"./base-terminal\";\nimport { Button } from \"@/components/ui/button\";\n\ntype InteractiveOption = {\n  label: string;\n  value: string;\n  description?: string;\n};\n\ntype InteractiveTerminalProps = TerminalProps & {\n  options?: InteractiveOption[];\n  showHelpButton?: boolean;\n  showClearButton?: boolean;\n};\n\nexport function InteractiveTerminal({\n  className,\n  options = [],\n  showHelpButton = true,\n  showClearButton = true,\n  ...props\n}: InteractiveTerminalProps) {\n  const [history, setHistory] = useState<\n    Array<{ command: string; response: string | string[] }>\n  >([]);\n  const [showOptions, setShowOptions] = useState(false);\n  const terminalRef = useRef<HTMLDivElement>(null);\n\n  // Custom command handler\n  const handleCommand = async (command: string) => {\n    // Check if command matches any option\n    const matchedOption = options.find(\n      (opt) =>\n        opt.value.toLowerCase() === command.toLowerCase() ||\n        opt.label.toLowerCase() === command.toLowerCase(),\n    );\n\n    if (command.toLowerCase() === \"help\") {\n      return [\n        \"Available commands:\",\n        ...options.map(\n          (opt) => `${opt.value} - ${opt.description || opt.label}`,\n        ),\n        \"\",\n        \"Type a command or click on the buttons below.\",\n      ];\n    } else if (command.toLowerCase() === \"clear\") {\n      setTimeout(() => setHistory([]), 100);\n      return \"Clearing terminal...\";\n    } else if (matchedOption) {\n      if (props.onCommand) {\n        return await props.onCommand(matchedOption.value);\n      }\n      return `Executed command: ${matchedOption.label}`;\n    } else if (props.onCommand) {\n      return await props.onCommand(command);\n    }\n\n    return `Command not recognized: ${command}. Type 'help' for available commands.`;\n  };\n\n  // Add command to history\n  const addToHistory = (command: string) => {\n    handleCommand(command).then((response) => {\n      setHistory((prev) => [...prev, { command, response }]);\n    });\n  };\n\n  // Clear terminal history\n  const clearTerminal = () => {\n    setHistory([]);\n  };\n\n  // Show help\n  const showHelp = () => {\n    addToHistory(\"help\");\n  };\n\n  return (\n    <div className={cn(\"relative flex h-80 flex-col\", className)}>\n      <div className=\"flex-1\">\n        <BaseTerminal\n          className=\"h-full rounded-b-none border-b-0\"\n          onCommand={handleCommand}\n          {...props}\n        />\n      </div>\n\n      <motion.div\n        className=\"rounded-b-md border border-t-0 bg-zinc-900 p-2\"\n        initial={{ opacity: 0, y: -10 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.5 }}\n      >\n        <div className=\"flex flex-wrap items-center gap-2\">\n          {showHelpButton && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={showHelp}\n              className=\"text-xs\"\n            >\n              Help\n            </Button>\n          )}\n\n          {showClearButton && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={clearTerminal}\n              className=\"text-xs\"\n            >\n              Clear\n            </Button>\n          )}\n\n          {options.length > 0 && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowOptions(!showOptions)}\n              className=\"text-xs\"\n            >\n              {showOptions ? \"Hide Commands\" : \"Show Commands\"}\n            </Button>\n          )}\n        </div>\n\n        <AnimatePresence>\n          {showOptions && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: \"auto\" }}\n              exit={{ opacity: 0, height: 0 }}\n              className=\"mt-2 overflow-hidden\"\n            >\n              <div className=\"flex flex-wrap gap-2\">\n                {options.map((option, index) => (\n                  <Button\n                    key={index}\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    onClick={() => addToHistory(option.value)}\n                    className=\"text-xs\"\n                    title={option.description}\n                  >\n                    {option.label}\n                  </Button>\n                ))}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </motion.div>\n    </div>\n  );\n}\n",
      "path": "/components/code-clamp/terminal/interactive-terminal.tsx",
      "target": "/components/code-clamp/interactive-terminal.tsx"
    }
  ]
}