{
  "name": "base-terminal",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "framer-motion"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nimport { Loader2 } from \"lucide-react\";\n\nexport type TerminalCommand = {\n  command: string;\n  response: string | string[];\n  timestamp?: Date;\n};\n\nexport type TerminalProps = {\n  className?: string;\n  prompt?: string;\n  welcomeMessage?: string | string[];\n  initialCommands?: TerminalCommand[];\n  autoFocus?: boolean;\n  readOnly?: boolean;\n  loading?: boolean;\n  onCommand?: (\n    command: string,\n  ) => Promise<string | string[]> | string | string[];\n};\n\nexport function BaseTerminal({\n  className,\n  prompt = \"$\",\n  welcomeMessage = \"Welcome to Terminal UI. Type 'help' to see available commands.\",\n  initialCommands = [],\n  autoFocus = true,\n  readOnly = false,\n  loading = false,\n  onCommand,\n}: TerminalProps) {\n  const [history, setHistory] = useState<TerminalCommand[]>(initialCommands);\n  const [command, setCommand] = useState(\"\");\n  const [commandHistory, setCommandHistory] = useState<string[]>([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const terminalRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const scrollToBottom = () => {\n    if (terminalRef.current) {\n      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;\n    }\n  };\n\n  const handleCommand = async () => {\n    if (!command.trim()) return;\n\n    const newCommand: TerminalCommand = {\n      command: command.trim(),\n      response: \"\",\n      timestamp: new Date(),\n    };\n\n    setHistory((prev) => [...prev, newCommand]);\n    setCommandHistory((prev) => [command, ...prev]);\n    setCommand(\"\");\n    setHistoryIndex(-1);\n    setIsProcessing(true);\n\n    try {\n      if (onCommand) {\n        const response = await onCommand(newCommand.command);\n        setHistory((prev) => {\n          const updated = [...prev];\n          updated[updated.length - 1]!.response = response;\n          return updated;\n        });\n      }\n    } catch (error) {\n      setHistory((prev) => {\n        const updated = [...prev];\n        updated[updated.length - 1]!.response =\n          `Error: ${error instanceof Error ? error.message : String(error)}`;\n        return updated;\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      handleCommand();\n    } else if (e.key === \"ArrowUp\") {\n      e.preventDefault();\n      if (commandHistory.length > 0) {\n        const newIndex = Math.min(historyIndex + 1, commandHistory.length - 1);\n        setHistoryIndex(newIndex);\n        setCommand(commandHistory[newIndex]!);\n      }\n    } else if (e.key === \"ArrowDown\") {\n      e.preventDefault();\n      if (historyIndex > 0) {\n        const newIndex = historyIndex - 1;\n        setHistoryIndex(newIndex);\n        setCommand(commandHistory[newIndex]!);\n      } else if (historyIndex === 0) {\n        setHistoryIndex(-1);\n        setCommand(\"\");\n      }\n    }\n  };\n\n  // Focus input on mount if autoFocus is true\n  useEffect(() => {\n    if (autoFocus && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  // Scroll to bottom when history changes\n  useEffect(() => {\n    scrollToBottom();\n  }, [history]);\n\n  // Format welcome message\n  const formattedWelcomeMessage = Array.isArray(welcomeMessage)\n    ? welcomeMessage\n    : [welcomeMessage];\n\n  return (\n    <div\n      className={cn(\n        \"flex h-80 flex-col rounded-md border bg-black font-mono text-sm text-green-500\",\n        className,\n      )}\n    >\n      <div className=\"flex h-7 items-center justify-start gap-1.5 rounded-t-md border-b bg-zinc-900 px-4\">\n        <div className=\"h-2.5 w-2.5 rounded-full bg-red-500\" />\n        <div className=\"h-2.5 w-2.5 rounded-full bg-yellow-500\" />\n        <div className=\"h-2.5 w-2.5 rounded-full bg-green-500\" />\n        <div className=\"flex-1 text-center text-xs text-zinc-400\">Terminal</div>\n      </div>\n\n      <div\n        ref={terminalRef}\n        className=\"scrollbar-thin scrollbar-thumb-zinc-700 scrollbar-track-transparent flex-1 overflow-auto p-4\"\n      >\n        {/* Welcome message */}\n        <AnimatePresence>\n          {formattedWelcomeMessage.map((line, i) => (\n            <motion.div\n              key={`welcome-${i}`}\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: i * 0.1 }}\n              className=\"mb-1\"\n            >\n              {line}\n            </motion.div>\n          ))}\n        </AnimatePresence>\n\n        {/* Command history */}\n        <AnimatePresence>\n          {history.map((item, i) => (\n            <motion.div\n              key={`history-${i}`}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              className=\"mt-2\"\n            >\n              <div className=\"flex\">\n                <span className=\"mr-2 text-blue-400\">{prompt}</span>\n                <span>{item.command}</span>\n              </div>\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ delay: 0.3 }}\n                className=\"mt-1 ml-4 whitespace-pre-wrap\"\n              >\n                {Array.isArray(item.response)\n                  ? item.response.map((line, j) => <div key={j}>{line}</div>)\n                  : item.response}\n              </motion.div>\n            </motion.div>\n          ))}\n        </AnimatePresence>\n\n        {/* Current command line */}\n        <div className=\"mt-2 flex\">\n          <motion.span\n            className=\"mr-2 text-blue-400\"\n            animate={{ opacity: [1, 0.5, 1] }}\n            transition={{ repeat: Infinity, duration: 2 }}\n          >\n            {prompt}\n          </motion.span>\n          <span>{command}</span>\n          {!readOnly && !isProcessing && !loading && (\n            <motion.span\n              animate={{ opacity: [0, 1, 0] }}\n              transition={{ repeat: Infinity, duration: 1 }}\n              className=\"ml-0.5 inline-block h-4 w-2 bg-green-500\"\n            />\n          )}\n          {(isProcessing || loading) && (\n            <Loader2 className=\"ml-2 h-4 w-4 animate-spin text-green-500\" />\n          )}\n        </div>\n      </div>\n\n      {/* Hidden input for capturing keystrokes */}\n      {!readOnly && (\n        <input\n          ref={inputRef}\n          type=\"text\"\n          className=\"sr-only\"\n          value={command}\n          onChange={(e) => setCommand(e.target.value)}\n          onKeyDown={handleKeyDown}\n          autoComplete=\"off\"\n          aria-label=\"Terminal input\"\n        />\n      )}\n    </div>\n  );\n}\n",
      "path": "/components/code-clamp/terminal/base-terminal.tsx",
      "target": "/components/code-clamp/base-terminal.tsx"
    }
  ]
}