{
  "name": "colorful-search-bar",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "framer-motion"
  ],
  "registryDependencies": [
    "input",
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { Search } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { useState, useRef, useEffect, type ComponentProps } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Input } from \"@/components/ui/input\";\n\ntype ColorScheme = \"blue\" | \"purple\" | \"green\" | \"amber\" | \"rose\";\n\nconst colorSchemes = {\n  blue: {\n    button: \"bg-blue-500 hover:bg-blue-600 text-white\",\n    input: \"border-blue-300 focus:border-blue-500\",\n    shadow: \"shadow-blue-200\",\n  },\n  purple: {\n    button: \"bg-purple-500 hover:bg-purple-600 text-white\",\n    input: \"border-purple-300 focus:border-purple-500\",\n    shadow: \"shadow-purple-200\",\n  },\n  green: {\n    button: \"bg-emerald-500 hover:bg-emerald-600 text-white\",\n    input: \"border-emerald-300 focus:border-emerald-500\",\n    shadow: \"shadow-emerald-200\",\n  },\n  amber: {\n    button: \"bg-amber-500 hover:bg-amber-600 text-white\",\n    input: \"border-amber-300 focus:border-amber-500\",\n    shadow: \"shadow-amber-200\",\n  },\n  rose: {\n    button: \"bg-rose-500 hover:bg-rose-600 text-white\",\n    input: \"border-rose-300 focus:border-rose-500\",\n    shadow: \"shadow-rose-200\",\n  },\n};\n\ninterface ColorfulSearchbarProps extends ComponentProps<typeof Input> {\n  onSearch?: (query: string) => void;\n  containerClassName?: string;\n  colorScheme?: ColorScheme;\n}\n\nfunction ColorfulSearchbar({\n  className,\n  containerClassName,\n  colorScheme = \"blue\",\n  onSearch,\n  value,\n  onChange,\n  ...inputProps\n}: ColorfulSearchbarProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [internalValue, setInternalValue] = useState(\"\");\n  const inputRef = useRef<HTMLInputElement>(null);\n  const colors = colorSchemes[colorScheme];\n\n  const isControlled = value !== undefined;\n  const searchQuery = isControlled ? String(value) : internalValue;\n\n  const setSearchQuery = (val: string) => {\n    if (isControlled && onChange) {\n      onChange({ target: { value: val } } as any);\n    } else {\n      setInternalValue(val);\n    }\n  };\n\n  const handleSearch = () => {\n    if (searchQuery.trim() && onSearch) {\n      onSearch(searchQuery);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleSearch();\n    } else if (e.key === \"Escape\") {\n      setIsExpanded(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isExpanded && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isExpanded]);\n\n  return (\n    <div className={cn(\"relative flex items-center\", containerClassName)}>\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, width: 0 }}\n            animate={{ opacity: 1, width: \"auto\" }}\n            exit={{ opacity: 0, width: 0 }}\n            transition={{ type: \"spring\", damping: 20, stiffness: 200 }}\n            className=\"overflow-hidden\"\n          >\n            <Input\n              ref={inputRef}\n              type=\"text\"\n              placeholder=\"Search anything...\"\n              className={cn(\n                \"h-10 rounded-l-md border px-3 py-2 focus:outline-none\",\n                colors.input,\n                colors.shadow,\n                \"shadow-sm transition-shadow duration-300\",\n                className,\n              )}\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              onKeyDown={handleKeyDown}\n              onBlur={() => {\n                if (!searchQuery) setIsExpanded(false);\n              }}\n              {...inputProps}\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      <motion.button\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n        className={cn(\n          \"flex h-10 items-center justify-center p-0 transition-all duration-300\",\n          isExpanded ? \"rounded-l-none rounded-r-md px-3\" : \"w-10 rounded-full\",\n          colors.button,\n        )}\n        onClick={() => {\n          if (isExpanded) {\n            handleSearch();\n          } else {\n            setIsExpanded(true);\n          }\n        }}\n      >\n        <Search className=\"h-4 w-4\" />\n      </motion.button>\n    </div>\n  );\n}\n\nexport default ColorfulSearchbar;\n",
      "path": "/components/code-clamp/search-bar/colorful-search-bar.tsx",
      "target": "/components/code-clamp/colorful-search-bar.tsx"
    }
  ]
}