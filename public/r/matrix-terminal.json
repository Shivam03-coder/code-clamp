{
  "name": "matrix-terminal",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "framer-motion"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { BaseTerminal, type TerminalProps } from \"./base-terminal\";\n\ntype MatrixTerminalProps = TerminalProps & {\n  matrixDensity?: number;\n  matrixSpeed?: number;\n};\n\nexport function MatrixTerminal({\n  className,\n  matrixDensity = 50,\n  matrixSpeed = 1,\n  ...props\n}: MatrixTerminalProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n  const animationRef = useRef<number>(0);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const container = canvas.parentElement;\n    if (!container) return;\n\n    const updateDimensions = () => {\n      const { width, height } = container.getBoundingClientRect();\n      canvas.width = width;\n      canvas.height = height;\n      setDimensions({ width, height });\n    };\n\n    updateDimensions();\n    window.addEventListener(\"resize\", updateDimensions);\n\n    return () => {\n      window.removeEventListener(\"resize\", updateDimensions);\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || dimensions.width === 0) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const columns = Math.floor(dimensions.width / 20);\n    const drops: number[] = Array(columns).fill(0);\n\n    const matrixChars =\n      \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789@#$%^&*()*&^%+-/~{[|`]}\".split(\n        \"\",\n      );\n\n    const draw = () => {\n      // Add semi-transparent black rectangle on top of previous frame\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.05)\";\n      ctx.fillRect(0, 0, dimensions.width, dimensions.height);\n\n      ctx.fillStyle = \"#0F0\";\n      ctx.font = \"15px monospace\";\n\n      for (let i = 0; i < drops.length; i++) {\n        // Random character\n        const text =\n          matrixChars[Math.floor(Math.random() * matrixChars.length)];\n\n        // x = i * character width, y = drops[i] * character height\n        ctx.fillText(text!, i * 20, drops[i]! * 20);\n\n        // Randomly reset some drops to top\n        if (drops[i]! * 20 > dimensions.height && Math.random() > 0.975) {\n          drops[i] = 0;\n        }\n\n        // Increment y coordinate\n        drops[i]!++;\n      }\n\n      animationRef.current = requestAnimationFrame(draw);\n    };\n\n    draw();\n\n    return () => {\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, [dimensions, matrixDensity, matrixSpeed]);\n\n  return (\n    <div className={cn(\"relative h-80\", className)}>\n      <canvas ref={canvasRef} className=\"absolute inset-0 z-0\" />\n      <BaseTerminal\n        className=\"relative z-10 bg-black/70 text-green-400\"\n        prompt=\">\"\n        welcomeMessage={[\n          \"Matrix Terminal Initialized\",\n          \"System breach detected...\",\n          \"Type 'connect' to establish secure connection\",\n        ]}\n        {...props}\n      />\n    </div>\n  );\n}\n",
      "path": "/components/code-clamp/terminal/matrix-terminal.tsx",
      "target": "/components/code-clamp/matrix-terminal.tsx"
    }
  ]
}