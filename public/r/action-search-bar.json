{
  "name": "action-search-bar",
  "type": "registry:component",
  "dependencies": ["lucide-react", "framer-motion"],
  "registryDependencies": ["input", "button"],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\nimport { Search } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\nfunction ActionSearchbar({\n  className,\n  onSearch,\n}: {\n  className?: string;\n  onSearch?: (query: string) => void;\n}) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleSearch = () => {\n    if (searchQuery.trim() && onSearch) {\n      onSearch(searchQuery);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleSearch();\n    } else if (e.key === \"Escape\") {\n      setIsExpanded(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isExpanded && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isExpanded]);\n\n  return (\n    <div className={cn(\"relative flex items-center\", className)}>\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, width: 0 }}\n            animate={{ opacity: 1, width: \"auto\" }}\n            exit={{ opacity: 0, width: 0 }}\n            transition={{ type: \"spring\", damping: 20, stiffness: 200 }}\n            className=\"overflow-hidden\"\n          >\n            <Input\n              ref={inputRef}\n              type=\"text\"\n              placeholder=\"Search anything...\"\n              className=\"h-10 rounded-r-none border-r-0 focus-visible:ring-0\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              onKeyDown={handleKeyDown}\n              onBlur={() => {\n                if (!searchQuery) setIsExpanded(false);\n              }}\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      <motion.div\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n      >\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          className={cn(\n            \"h-10 w-10 rounded-full p-0\",\n            isExpanded && \"rounded-l-none\",\n          )}\n          onClick={() => {\n            if (isExpanded) {\n              handleSearch();\n            } else {\n              setIsExpanded(true);\n            }\n          }}\n        >\n          <Search className=\"h-4 w-4\" />\n        </Button>\n      </motion.div>\n    </div>\n  );\n}\n\nexport default ActionSearchbar",
      "path": "/components/code-clamp/search-bar/action-search-bar.tsx",
      "target": "/components/code-clamp/action-search-bar.tsx"
    }
  ]
}
