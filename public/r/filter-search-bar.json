{
  "name": "filter-search-bar",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "framer-motion"
  ],
  "registryDependencies": [
    "input",
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport type React from \"react\";\n\nimport { Search, Filter, X } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { useState, useRef, useEffect, type ComponentProps } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\n\ntype FilterOption = {\n  id: string;\n  label: string;\n};\n\ninterface FilterSearchBarProps extends ComponentProps<typeof Input>  {\n  className?: string;\n  onSearch?: (query: string, filters: string[]) => void;\n  filterOptions?: FilterOption[];\n  placeholder?: string;\n}\n\nfunction FilterSearchbar({\n  className,\n  onSearch,\n  filterOptions = [],\n  placeholder = \"Search anything...\",\n}: FilterSearchBarProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedFilters, setSelectedFilters] = useState<string[]>([]);\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleSearch = () => {\n    if ((searchQuery.trim() || selectedFilters.length > 0) && onSearch) {\n      onSearch(searchQuery, selectedFilters);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleSearch();\n    } else if (e.key === \"Escape\") {\n      setIsExpanded(false);\n    }\n  };\n\n  const toggleFilter = (id: string) => {\n    setSelectedFilters((prev) =>\n      prev.includes(id) ? prev.filter((item) => item !== id) : [...prev, id],\n    );\n  };\n\n  const clearFilters = () => {\n    setSelectedFilters([]);\n  };\n\n  useEffect(() => {\n    if (isExpanded && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isExpanded]);\n\n  return (\n    <div className={cn(\"relative flex items-center\", className)}>\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, width: 0 }}\n            animate={{ opacity: 1, width: \"auto\" }}\n            exit={{ opacity: 0, width: 0 }}\n            transition={{ type: \"spring\", damping: 20, stiffness: 200 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"flex\">\n              <Input\n                ref={inputRef}\n                type=\"text\"\n                placeholder={placeholder}\n                className=\"h-10 rounded-r-none border-r-0 focus-visible:ring-0\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                onKeyDown={handleKeyDown}\n                onBlur={() => {\n                  if (!searchQuery && !isFilterOpen) setIsExpanded(false);\n                }}\n              />\n\n              <Popover open={isFilterOpen} onOpenChange={setIsFilterOpen}>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className={cn(\n                      \"h-10 rounded-none border-x-0\",\n                      selectedFilters.length > 0 && \"bg-primary/10\",\n                    )}\n                  >\n                    <Filter\n                      className={cn(\n                        \"h-4 w-4\",\n                        selectedFilters.length > 0 && \"text-primary\",\n                      )}\n                    />\n                    {selectedFilters.length > 0 && (\n                      <span className=\"bg-primary text-primary-foreground absolute -top-1 -right-1 flex h-4 w-4 items-center justify-center rounded-full text-[10px]\">\n                        {selectedFilters.length}\n                      </span>\n                    )}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-56 p-3\" align=\"start\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium\">Filters</h4>\n                      {selectedFilters.length > 0 && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-muted-foreground h-auto p-0 text-xs\"\n                          onClick={clearFilters}\n                        >\n                          Clear all\n                        </Button>\n                      )}\n                    </div>\n                    <div className=\"space-y-2\">\n                      {filterOptions.map((option) => (\n                        <div\n                          key={option.id}\n                          className=\"flex items-center space-x-2\"\n                        >\n                          <Checkbox\n                            id={option.id}\n                            checked={selectedFilters.includes(option.id)}\n                            onCheckedChange={() => toggleFilter(option.id)}\n                          />\n                          <Label\n                            htmlFor={option.id}\n                            className=\"text-sm font-normal\"\n                          >\n                            {option.label}\n                          </Label>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </PopoverContent>\n              </Popover>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      <motion.div\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n      >\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          className={cn(\n            \"h-10 w-10 rounded-full p-0\",\n            isExpanded && \"rounded-l-none\",\n          )}\n          onClick={() => {\n            if (isExpanded) {\n              handleSearch();\n            } else {\n              setIsExpanded(true);\n            }\n          }}\n        >\n          <Search className=\"h-4 w-4\" />\n        </Button>\n      </motion.div>\n\n      {isExpanded && selectedFilters.length > 0 && (\n        <div className=\"ml-2 flex flex-wrap gap-1\">\n          {selectedFilters.map((id) => {\n            const option = filterOptions.find((opt) => opt.id === id);\n            return (\n              <motion.div\n                key={id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"bg-primary/10 flex items-center rounded-full px-2 py-1 text-xs\"\n              >\n                <span className=\"mr-1\">{option?.label}</span>\n                <X\n                  className=\"h-3 w-3 cursor-pointer\"\n                  onClick={() => toggleFilter(id)}\n                />\n              </motion.div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default FilterSearchbar;\n",
      "path": "/components/code-clamp/search-bar/filter-search-bar.tsx",
      "target": "/components/code-clamp/filter-search-bar.tsx"
    }
  ]
}